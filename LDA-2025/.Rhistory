# Target parameter: stochastic intervention on cumA
shift_spec <- define_shift(
shift_val = 1,               # shift cumA by +1
shift_f = shift_function,
treatment_value = "cumA",
intervention_type = "additive"
)
devtools::install_github("tlverse/tmle3shift")
devtools::install_github("tlverse/tmle3shift", force = T)
# Load it
library(tmle3shift)
set.seed(123)
n <- 200
df <- data.frame(id = 1:n)
for (t in 1:5) {
L <- paste0("L", t)
A <- paste0("A", t)
df[[L]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t - 1)]] * 0.5), sd = 1)
df[[A]] <- rnorm(n, mean = df[[L]] * 0.8, sd = 1)
}
df$cumA <- rowSums(df[paste0("A", 1:5)])
df$Y <- 2 + 0.4 * df$cumA + 0.2 * rowSums(df[paste0("L", 1:5)]) + rnorm(n)
# Define node list
node_list <- list(
W = paste0("L", 1:5),
A = "cumA",
Y = "Y",
id = "id"
)
# Shift function: increase cumA by delta (e.g., +1)
shift_function <- function(data, delta = 1) {
data$cumA <- data$cumA + delta
return(data)
}
# Target parameter: stochastic intervention on cumA
shift_spec <- define_shift(
shift_val = 1,               # shift cumA by +1
shift_f = shift_function,
treatment_value = "cumA",
intervention_type = "additive"
)
# Target parameter: stochastic intervention on cumA
shift_spec <- tmle3shift::define_shift(
shift_val = 1,               # shift cumA by +1
shift_f = shift_function,
treatment_value = "cumA",
intervention_type = "additive"
)
ls("package:tmle3shift")
library(tmle3)
library(tmle3shift)
library(sl3)
# Define your nodes (same as before)
node_list <- list(
W = paste0("L", 1:5),
A = "cumA",
Y = "Y",
id = "id"
)
# Define the shift value
shift_val <- 1
# Create shift specification (tmle3_spec object)
shift_spec <- tmle3shift::tmle3_shift(
shift_val = shift_val,
shift_var = "cumA",
shift_type = "additive"
)
library(tmle3)
library(sl3)
# Using your simulated df
# df already has 'cumA', 'Y', and L1-L5
# Define node list for tmle3
node_list <- list(
W = paste0("L", 1:5),  # baseline and time-varying covariates
A = "cumA",
Y = "Y",
id = "id"
)
# Define learners for outcome and treatment
lrnr_Y <- make_learner(Lrnr_glm)
lrnr_A <- make_learner(Lrnr_glm)
# Learner stack if you want:
lrnr_stack <- make_learner_stack(lrnr_Y, make_learner(Lrnr_mean))
learner_list <- list(Y = lrnr_Y, A = lrnr_A)
# Sequence of dose values to evaluate
dose_grid <- seq(min(df$cumA), max(df$cumA), length.out = 20)
# Function to run TMLE at fixed dose (static intervention setting cumA = dose_val)
run_tmle_fixed_dose <- function(dose_val, data, node_list, learner_list) {
# Override A with fixed dose
data_fixed <- data
data_fixed[[node_list$A]] <- dose_val
# Create tmle task on modified data
tmle_task <- make_tmle_task(data = data_fixed, node_list = node_list)
# Define parameter: mean outcome (no stochastic intervention here, just static)
parameter <- tmle3::define_param_mean(tmle_task, "Y")
# Setup TMLE learner
tmle_spec <- tmle3::tmle3_Spec(parameter, learner_list)
# Run TMLE
tmle_fit <- tmle3(tmle_spec, tmle_task, learner_list)
# Return the estimated mean outcome and confidence interval
est <- tmle_fit$summary$psi
ci <- tmle_fit$summary$CI
return(list(dose = dose_val, est = est, ci_lower = ci[1], ci_upper = ci[2]))
}
# Run over all dose values
results <- lapply(dose_grid, run_tmle_fixed_dose, data = df, node_list = node_list, learner_list = learner_list)
library(dplyr)
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Continuous confounder
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
# Continuous exposure, depends on L
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
# Continuous outcome depending on cumulative A and L
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
df_tmle <- df %>%
mutate(
cumA = rowSums(select(., starts_with("A"))),    # cumulative exposure
meanL = rowMeans(select(., starts_with("L")))   # average confounder
) %>%
select(Y, cumA, meanL)
library(tmle3)
library(sl3)
# Define nodes
node_list <- list(
W = "meanL",  # baseline covariate(s)
A = "cumA",   # continuous treatment
Y = "Y"       # outcome
)
# Define learners for outcome regression (Q) and treatment mechanism (g)
lrnr_mean <- make_learner(Lrnr_mean)
lrnr_glm <- make_learner(Lrnr_glm)
lrnr_stack <- make_learner_stack(lrnr_glm, lrnr_mean)
lrnr_glm <- make_learner(Lrnr_glm)
lrnr_mean <- make_learner(Lrnr_mean)
lrnr_stack <- make_learner_stack(lrnr_glm, lrnr_mean)
# Define learners for outcome regression (Q) and treatment mechanism (g)
lrnr_super <- make_learner(Lrnr_sl, learners = list(lrnr_glm, lrnr_mean))
learner_list <- list(
Y = lrnr_stack,
A = lrnr_glm
)
library(dplyr)
library(tmle3)
library(sl3)
# 1. Simulate data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
# 2. Summarize data for TMLE
df_tmle <- df %>%
mutate(
cumA = rowSums(select(., starts_with("A"))),
meanL = rowMeans(select(., starts_with("L")))
) %>%
select(Y, cumA, meanL)
# 3. Define nodes for tmle3
node_list <- list(
W = "meanL",  # confounders
A = "cumA",   # continuous treatment
Y = "Y"       # outcome
)
# 4. Create learners
lrnr_glm <- make_learner(Lrnr_glm)
lrnr_mean <- make_learner(Lrnr_mean)
lrnr_super <- make_learner(Lrnr_sl, learners = list(lrnr_glm, lrnr_mean))
learners <- list(
Y = lrnr_super,
A = lrnr_glm
)
# 5. Create tmle task
tmle_task <- make_tmle_task(df_tmle, node_list)
library(dplyr)
library(tmle3)
library(sl3)
# 1. Simulate data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
# 2. Summarize data for TMLE
df_tmle <- df %>%
mutate(
cumA = rowSums(select(., starts_with("A"))),
meanL = rowMeans(select(., starts_with("L")))
) %>%
select(Y, cumA, meanL)
# 3. Define nodes for tmle3
# Your nodes list again:
node_list <- list(
W = "meanL",
A = "cumA",
Y = "Y"
)
# Create task:
tmle_task <- tmle3_Task$new(
data = df_tmle,
nodes = node_list
)
# Load packages
library(ltmle)
library(SuperLearner)
library(dplyr)
# Simulate continuous longitudinal data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Continuous confounder
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
# Continuous exposure, depends on L
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
# Continuous outcome Y depending on cumulative A and L
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
# Define node names
Anodes <- paste0("A", 1:5)
Lnodes <- paste0("L", 1:5)
Ynodes <- "Y"
n <- nrow(df)
num_time_points <- length(Anodes)
# observed continuous treatment from the data
regimes <- array(as.matrix(df[, Anodes]), dim = c(n, num_time_points, 1))
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
working.msm = "Y ~ cumA + I(cumA^2)"
# Estimate MSM via LTMLE
ltmle_fit <- ltmleMSM(
data = df,
Anodes = Anodes,
Lnodes = Lnodes,
Ynodes = Ynodes,
survivalOutcome = FALSE,
regimes = regimes,
summary.measures = summary_measures,
working.msm = working.msm,
SL.library = c("SL.glm", "SL.gam", "SL.mean")
)
df
# Load packages
library(ltmle)
library(SuperLearner)
library(dplyr)
# Simulate discrete longitudinal data (positive integers only)
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Positive integer confounder L
if (t == 1) {
df[[L_name]] <- sample(1:5, n, replace = TRUE)
} else {
df[[L_name]] <- pmax(1, round(df[[paste0("L", t-1)]] * 0.5 + rpois(n, lambda = t)))
}
# Positive integer treatment A, depending on L
df[[A_name]] <- pmax(1, round(df[[L_name]] * 0.8 + rpois(n, lambda = 1)))
}
# Outcome Y depending on cumulative A and L (still continuous)
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
df
Anodes <- paste0("A", 1:5)
Lnodes <- paste0("L", 1:5)
Ynodes <- "Y"
n <- nrow(df)
num_time_points <- length(Anodes)
# observed discrete treatment from the data
regimes <- array(as.matrix(df[, Anodes]), dim = c(n, num_time_points, 1))
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
working.msm = "Y ~ cumA + I(cumA^2)"
# Estimate MSM via LTMLE
ltmle_fit <- ltmleMSM(
data = df,
Anodes = Anodes,
Lnodes = Lnodes,
Ynodes = Ynodes,
survivalOutcome = FALSE,
regimes = regimes,
summary.measures = summary_measures,
working.msm = working.msm,
SL.library = c("SL.glm", "SL.gam", "SL.mean")
)
# Load packages
library(ltmle)
library(SuperLearner)
library(dplyr)
# Simulate continuous longitudinal data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Continuous confounder
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
# Continuous exposure, depends on L
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
# Continuous outcome Y depending on cumulative A and L
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
# Define node names
Anodes <- paste0("A", 1:5)
Lnodes <- paste0("L", 1:5)
Ynodes <- "Y"
n <- nrow(df)
num_time_points <- length(Anodes)
# observed continuous treatment from the data
regimes <- array(as.matrix(df[, Anodes]), dim = c(n, num_time_points, 1))
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
working.msm = "Y ~ cumA + I(cumA^2)"
# Estimate MSM via LTMLE
ltmle_fit <- ltmleMSM(
data = df,
Anodes = Anodes,
Lnodes = Lnodes,
Ynodes = Ynodes,
survivalOutcome = FALSE,
regimes = regimes,
summary.measures = summary_measures,
working.msm = working.msm,
SL.library = c("SL.glm", "SL.gam", "SL.mean")
)
df
df <-
df %>%
mutate(across(
.cols = c(cL1:A5),
.fns = ~ ifelse(. >= quantile(., 0.8, na.rm = TRUE), 1, 0)
))
df <-
df %>%
mutate(across(
.cols = c(L1:A5),
.fns = ~ ifelse(. >= quantile(., 0.8, na.rm = TRUE), 1, 0)
))
df
# Load packages
library(ltmle)
library(SuperLearner)
library(dplyr)
# Simulate continuous longitudinal data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Continuous confounder
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
# Continuous exposure, depends on L
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
# Continuous outcome Y depending on cumulative A and L
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
df <-
df %>%
mutate(across(
.cols = c(L1:A5),
.fns = ~ ifelse(. >= quantile(., 0.8, na.rm = TRUE), 1, 0)
))
# Define node names
Anodes <- paste0("A", 1:5)
Lnodes <- paste0("L", 1:5)
Ynodes <- "Y"
n <- nrow(df)
num_time_points <- length(Anodes)
# observed continuous treatment from the data
regimes <- array(as.matrix(df[, Anodes]), dim = c(n, num_time_points, 1))
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
working.msm = "Y ~ cumA + I(cumA^2)"
# Estimate MSM via LTMLE
ltmle_fit <- ltmleMSM(
data = df,
Anodes = Anodes,
Lnodes = Lnodes,
Ynodes = Ynodes,
survivalOutcome = FALSE,
regimes = regimes,
summary.measures = summary_measures,
working.msm = working.msm,
SL.library = c("SL.glm", "SL.gam", "SL.mean")
)
regimes
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
# Load packages
library(ltmle)
library(SuperLearner)
library(dplyr)
# Simulate continuous longitudinal data
set.seed(123)
n <- 200
sim_data <- function(n) {
df <- data.frame(id = 1:n)
for (t in 1:5) {
L_name <- paste0("L", t)
A_name <- paste0("A", t)
# Continuous confounder
df[[L_name]] <- rnorm(n, mean = t + ifelse(t == 1, 0, df[[paste0("L", t-1)]] * 0.5), sd = 1)
# Continuous exposure, depends on L
df[[A_name]] <- rnorm(n, mean = df[[L_name]] * 0.8, sd = 1)
}
# Continuous outcome Y depending on cumulative A and L
df$Y <- 2 + 0.4 * rowSums(df[paste0("A", 1:5)]) +
0.2 * rowSums(df[paste0("L", 1:5)]) +
rnorm(n, 0, 1)
return(df)
}
df <- sim_data(n)
df <-
df %>%
mutate(across(
.cols = c(L1:A5),
.fns = ~ ifelse(. >= quantile(., 0.8, na.rm = TRUE), 1, 0)
))
# Define node names
Anodes <- paste0("A", 1:5)
Lnodes <- paste0("L", 1:5)
Ynodes <- "Y"
n <- nrow(df)
num_time_points <- length(Anodes)
# observed continuous treatment from the data
regimes <- array(as.matrix(df[, Anodes]), dim = c(n, num_time_points, 1))
summary_measures <- array(NA, dim = c(n, 1, 1))
summary_measures[,1,1] <- rowSums(df[, Anodes])  # cumulative dose
dimnames(summary_measures) <- list(NULL, "cumA", NULL)
working.msm = "Y ~ cumA"
# Estimate MSM via LTMLE
ltmle_fit <- ltmleMSM(
data = df,
Anodes = Anodes,
Lnodes = Lnodes,
Ynodes = Ynodes,
survivalOutcome = FALSE,
regimes = regimes,
summary.measures = summary_measures,
working.msm = working.msm,
SL.library = c("SL.glm", "SL.gam", "SL.mean")
)
regimes
num_time_points
